Block := "{", (
          | VariableDeclaration
          | ExpressionStatement
          | Epsilon
         )+, "}";

VariableDeclaration := ["pub"], ["extern"], "let", Namespace, ":", Type, ";";
ExpressionStatement := Expression, ";";

Expression := (VariableAssignment | VariableAssignmentDeclaration | FunctionExpr | Literal);
VariableAssignment := ["pub"], "let", Namespace, "=", Expression;
VariableAssignmentDeclaration := ["pub"], "let", Namespace, ":", Type, "=", Expression;
FunctionExpr := Namespace, "(", FunctionArgs, ")", ["->", Type], Block;

(* Some defs are left out *)
Literal := (Integer | String | Bool);
Bool := ("true" | "false");

FunctionArgs := {Posarg, ","} Posarg, [","];

NameID := ID;

Posarg := Namespace, ":", Type;

Tuple := "(", {Expression, ","}, ")"
      | "(", ",", ")"
      | "(", ")";

Expression := Term, {( "+" | "-" ), Term};
Term := Factor, {( "*" | "/" | "%" ), Factor};
Factor := Item | "-", Factor;
Item := Integer | Float | Tuple | ID | "(", Expression, ")";

FunctionCall := ID, "(", {Expresion, ","}+, ")";

Type := NamespaceType | TupleType | FuncType;

TupleType := "(", TupleTypeItems, [","], ")" ;
TupleTypeItems := {TupleItems, ",", Type};

FuncType := {"(", FuncTypeItems, ")"};
FuncTypeItems := {FuncTypeItems, ",", [Namespace, ":"], Type};

BLOCK -> lbrace VAR_DEC rbrace
       | lbrace EXPR_STMT rbrace
       | epsolon.

VAR_DEC -> pub extern let NAMESPACE colon TYPE semi
         | pub let NAMESPACE colon TYPE semi
         | extern let NAMESPACE colon TYPE semi
         | let NAMESPACE colon TYPE semi.

EXPR_STMT -> EXPR semi.


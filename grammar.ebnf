program = { statement } ;

(* Statements *)
statement = declaration | definition | implementation | trait def | record | import ;

import = ("import", namespace, ['as', ident]) 
       | "from", namespace, "import", ((ident, { ",", ident }) | "*") ;

record = "rec", ident, [colon, { "'", ident, space }, ["'", ident]], "=", { record item, "|" }, [record item] ;
record item = ident, ("{", { declaration }, "}" | { type }) ;

declaration = "dec", name, colon, type, break ;
definition = "let", binding;
binding = name, [colon, { pattern, space }, [pattern]], "=", expr, break ;

trait def = "trait", ident, ":", { "'", ident, space }, ["'", ident], "{", { declaration | definition }, "}" ;

implementation = "impl", ident, ":", type, "{", { definition }, "}" ;

opdef = "opdef", "(", operator, ")", ("nonassoc" | "right" | "left"), ("postfix" | "prefix" | "binary"), number ;

(* Expressions *)
expr = literal
     | tuple
     | macro
     | match
     | if
     | let in
     | namespace
     | function application
     | expr, operator, expr
     | lambda
     | "(", expr, ")" ;

lambda = "\", { pattern }-, "=>", expr ;

function application = expr, { expr, space }, [expr];

tuple = "(", { expr, "," }, [expr], ")" ;

match = "match", expr, "{", { single match, break }, [single match]"}" ;
single match = pattern, "=>", expr ;

if = "if", expr, "{", expr, "}", { "else", "if", expr, "{", expr, "}" }, "else", "{", expr, "}";

let in = "let", binding, { "," binding }, "in", "{", expr, "}";

macro = ident, "!", "[", valid tokens, "]" ;
valid tokens = ? valid tokens, with proper closed parens ?;

pattern = tuple match | ident | "(", ident, [{ ident }], ")" | "_" | literal | "[" pattern, operator, pattern, "]" | "(", pattern, ")" ;
tuple match = "(", { pattern, "," }, [pattern], ")" ;

(* Types *)
type = "_" | namespace | namespace { type, space }, [type] | "(", type, ")" | "'", ident;

(* Identifiers *)
name = ident | "(", symbol, ")" ;
ident = (letter | underscore), { digit | letter | special } ;
special = "'" | "_" | "?" ;
namespace = ident, [{ "::", ident }] ;

(* Literals *)
literal = float | number | string | "[", "]";
number = { digit }- ;
float = { digit }-, dot, { digit }- ;
op = { symbol }- ;
string = '"', { all characters }, '"';
char = "'", all characters, "'";
all characters = ? all characters ? ;

break = newline | ";" ;
space = " " ;
newline = "\n" ;
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
symbol = { symbol char } ;
symbol char = "+" | "*" | "-" | "/" | "<" | ">" | "|" | ":" | "$" | "^" | "@" | "!" | "~" | "%" | "&" | "." ;

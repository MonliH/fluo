(* High level *)
program = { outer statement } ;
outer statement = record definition | function definition | import | typeclass | instance | var def ;
inner statement = return | expr statement ;

(* Statements *)
var def = let, ident, [colon, type], equals, expr, newline ;
return statement = return, expr, newline ;
expr statement = expr, newline ;
import = import, namespace, newline ;

(* Record Definition *)
record definition = record, ident, [generic], equals, sum rec;
sum rec = {sum rec item, pipe}, [sum rec item];
sum rec item = ident, [(type | struct type)];
struct type = lcurly, {struct type item, (newline | comma)}, [struct type item], rcurly ;
struct type item = ident, colon, type ;

(* Function Definition *)
function definition = function, ident, generic, lparen, function arguments, rparen, [coloncolon, type], [block], newline ;
function arguments = 
    {def pos args, comma},
    (
        [def pos args]
        | ( {def keyword arg, comma} | [ def keyword arg | def var arg ] )
    ) ;
def pos arg = ident, colon, type ;
def keyword arg = ident, (eqcolon, type) | (equals, expr) | (equals, expr, colon, type);
def var arg = dotdotdot, ident, colon, type ;

(* Pattern matching *)
pattern match = pattern, expr, lcurly, {pattern, (newline | comma)}, [pattern], rcurly ;
pattern = match, arrow, expr ;
match = (namespace, [match sum | match record]) | number | float | string ;
match sum = {ident | match } ;
match record = lcurly, {match record item, (newline | comma)}, [match record item], rcurly ;
match record item = ident, colon, match ;

(* Expressions *)
expr = item
      | (item, op, item)
      | (item, op)
      | (op, item) ;

item = number | float | ident | function call | record init | block | string | pattern match | var def;

block = lcurly, { inner statement }, rcurly ;

(* Function Call *)
function call = namespace, lparen, call args, rparen ;
call args = pos args, keyword args ;
pos args = {expr, comma}, [expr] ;
keyword args = {equals pair, comma}, [equals pair] ;
equals pair = ident equals expr;

(* Record Init *)
record init = namspace, [sum record | struct record] ;
sum record = { expr }- ;
struct record = lcurly, {struct value, comma}, [struct value], rcurly ;
struct value = ident, colon, expr ;

(* Types *)
type = ident | (ident, generic) | instance type | underscore ;
instance type = inst, {ident, plus}, ident ;
generic = lbracket, {type, comma}, [type], rbracket ;

(* Identifiers *)
ident = letter, {digit | letter} ;
namespace = ident, [{dot ident}] ;

(* Literals *)
number = { digit }- ;
float = { digit }-, dot, { digit }- ;
op = { symbol }- ;
string = qoute, "(?:[^"\\]|\\.)*", qoute ;

(* Constants *)
let = "let" ;
return = "return" ;
import = "import" ;
record = "rec" ;
function = "fun" ;
inst = "inst";
colon = ":" ;
equals = "=" ;
dot = "." ;
arrow = "->" ;
pipe = "|" ;
underscore = "_";
eqcolon = "=:";
dotdotdot = "...";

lbracket = "[" ;
rbracket = "]" ;
lparen = "(" ;
rparen = ")" ;
lcurly = "{" ;
rcurly = "}" ;

newline = "\n" ;

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

symbol = "+" | "*" | "-" | "/" | "<" | ">" | "|" | ":" | "$" | "#" | "^" | "@" | "!" | "~" ;

-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Syntax/Parser.y
-----------------------------------------------------------------------------

state 0 contains 1 shift/reduce conflicts.
state 47 contains 2 shift/reduce conflicts.
state 52 contains 2 shift/reduce conflicts.
state 55 contains 2 reduce/reduce conflicts.
state 83 contains 2 shift/reduce conflicts.
state 84 contains 2 shift/reduce conflicts.
state 86 contains 2 shift/reduce conflicts.

terminal rec is unused
terminal impl is unused
terminal trait is unused
terminal match is unused
terminal '"' is unused
terminal "'" is unused
terminal '[' is unused
terminal ']' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_statements -> Statements                    (0)
	%start_ty -> Type                                  (1)
	%start_expr -> Expr                                (2)
	Statements -> StatementsInner                      (3)
	Statements ->                                      (4)
	StatementsInner -> Statements Statement            (5)
	StatementsInner -> Statement                       (6)
	Statement -> dec Ident ':' Type                    (7)
	Expr -> Literal                                    (8)
	Expr -> Expr Operator Expr                         (9)
	Expr -> Tuple                                      (10)
	Expr -> Namespace                                  (11)
	Expr -> let Bindings in Expr                       (12)
	Expr -> if Expr '{' Expr '}' else '{' Expr '}'     (13)
	Expr -> if Expr '{' Expr '}' ElifCond else '{' Expr '}'   (14)
	Expr -> Expr Expr                                  (15)
	Bindings -> BindingsInner                          (16)
	BindingsInner -> BindingsInner Binding             (17)
	BindingsInner -> Binding                           (18)
	Binding -> Patterns '=' Expr                       (19)
	Patterns -> PatternsInner                          (20)
	PatternsInner -> PatternsInner PatternBinding      (21)
	PatternsInner -> PatternBinding                    (22)
	PatternBinding -> Ident                            (23)
	PatternBinding -> '(' Pattern ')'                  (24)
	PatternsUnconstrained -> PatternsUnconstrained Pattern   (25)
	PatternsUnconstrained -> Pattern                   (26)
	Pattern -> Ident                                   (27)
	Pattern -> Namespace PatternsUnconstrained         (28)
	Pattern -> '(' Pattern ')'                         (29)
	ElifCond -> ElifCondInner                          (30)
	ElifCondInner -> ElifCondInner Elif                (31)
	ElifCondInner -> Elif                              (32)
	Elif -> elif Expr '{' Expr '}'                     (33)
	Tuple -> '(' ')'                                   (34)
	Tuple -> '(' ',' ')'                               (35)
	Tuple -> '(' Expr ',' ')'                          (36)
	Tuple -> '(' TupleExpr ',' ')'                     (37)
	Tuple -> '(' TupleExpr ')'                         (38)
	Tuple -> '(' Expr ')'                              (39)
	TupleExpr -> TupleExpr ',' Expr                    (40)
	TupleExpr -> Expr ',' Expr                         (41)
	Operator -> operator                               (42)
	Literal -> string                                  (43)
	Literal -> float                                   (44)
	Literal -> integer                                 (45)
	Type -> '_'                                        (46)
	Type -> Namespace                                  (47)
	Type -> '(' TupleType ')'                          (48)
	Type -> '(' ')'                                    (49)
	Type -> '(' ',' ')'                                (50)
	Type -> '(' Type ',' ')'                           (51)
	Type -> '(' TupleType ',' ')'                      (52)
	Type -> '(' Type ')'                               (53)
	Type -> Type Type                                  (54)
	Type -> Type '->' Type                             (55)
	TupleType -> TupleType ',' Type                    (56)
	TupleType -> Type ',' Type                         (57)
	Ident -> identifier                                (58)
	Namespace -> NamespaceInner                        (59)
	NamespaceInner -> Ident                            (60)
	NamespaceInner -> NamespaceInner '::' Ident        (61)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { MkToken _ LetTok }
	rec            { MkToken _ RecTok }
	impl           { MkToken _ ImplTok }
	trait          { MkToken _ TraitTok }
	dec            { MkToken _ DecTok }
	in             { MkToken _ InTok }
	if             { MkToken _ IfTok }
	else           { MkToken _ ElseTok }
	elif           { MkToken _ ElifTok }
	match          { MkToken _ MatchTok }
	'"'            { MkToken _ DoubleQouteTok }
	"'"            { MkToken _ SingleQouteTok }
	'('            { MkToken _ LParenTok }
	')'            { MkToken _ RParenTok }
	'['            { MkToken _ LBracketTok }
	']'            { MkToken _ RBracketTok }
	'{'            { MkToken _ LCurlyTok }
	'}'            { MkToken _ RCurlyTok }
	'_'            { MkToken _ (IdentTok "_") }
	identifier     { MkToken _ (IdentTok _) }
	string         { MkToken _ (StrTok _) }
	integer        { MkToken _ (IntegerTok _) }
	float          { MkToken _ (FloatTok _) }
	'->'           { MkToken _ (OperatorTok "->") }
	','            { MkToken _ (OperatorTok ",") }
	'::'           { MkToken _ (OperatorTok "::") }
	':'            { MkToken _ (OperatorTok ":") }
	'='            { MkToken _ (OperatorTok "=") }
	operator       { MkToken _ (OperatorTok _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_statements rule  0
	%start_ty       rule  1
	%start_expr     rule  2
	Statements      rules 3, 4
	StatementsInner rules 5, 6
	Statement       rule  7
	Expr            rules 8, 9, 10, 11, 12, 13, 14, 15
	Bindings        rule  16
	BindingsInner   rules 17, 18
	Binding         rule  19
	Patterns        rule  20
	PatternsInner   rules 21, 22
	PatternBinding  rules 23, 24
	PatternsUnconstrained rules 25, 26
	Pattern         rules 27, 28, 29
	ElifCond        rule  30
	ElifCondInner   rules 31, 32
	Elif            rule  33
	Tuple           rules 34, 35, 36, 37, 38, 39
	TupleExpr       rules 40, 41
	Operator        rule  42
	Literal         rules 43, 44, 45
	Type            rules 46, 47, 48, 49, 50, 51, 52, 53, 54, 55
	TupleType       rules 56, 57
	Ident           rule  58
	Namespace       rule  59
	NamespaceInner  rules 60, 61

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_statements -> . Statements                   (rule 0)

	dec            shift, and enter state 7
			(reduce using rule 4)

	%eof           reduce using rule 4

	Statements     goto state 25
	StatementsInnergoto state 5
	Statement      goto state 6

State 1

	%start_ty -> . Type                                 (rule 1)

	'('            shift, and enter state 23
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17

	Type           goto state 21
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 2

	%start_expr -> . Expr                               (rule 2)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 8
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 3

	Statements -> . StatementsInner                     (rule 3)

	dec            shift, and enter state 7

	Statements     goto state 4
	StatementsInnergoto state 5
	Statement      goto state 6

State 4

	StatementsInner -> Statements . Statement           (rule 5)

	dec            shift, and enter state 7

	Statement      goto state 26

State 5

	Statements -> StatementsInner .                     (rule 3)

	dec            reduce using rule 3
	%eof           reduce using rule 3


State 6

	StatementsInner -> Statement .                      (rule 6)

	dec            reduce using rule 6
	%eof           reduce using rule 6


State 7

	Statement -> dec . Ident ':' Type                   (rule 7)

	identifier     shift, and enter state 17

	Ident          goto state 50

State 8

	%start_expr -> Expr .                               (rule 2)
	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49
	%eof           accept

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 9

	Expr -> Tuple .                                     (rule 10)

	let            reduce using rule 10
	in             reduce using rule 10
	if             reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'{'            reduce using rule 10
	'}'            reduce using rule 10
	identifier     reduce using rule 10
	string         reduce using rule 10
	integer        reduce using rule 10
	float          reduce using rule 10
	','            reduce using rule 10
	operator       reduce using rule 10
	%eof           reduce using rule 10


State 10

	Expr -> Literal .                                   (rule 8)

	let            reduce using rule 8
	in             reduce using rule 8
	if             reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	identifier     reduce using rule 8
	string         reduce using rule 8
	integer        reduce using rule 8
	float          reduce using rule 8
	','            reduce using rule 8
	operator       reduce using rule 8
	%eof           reduce using rule 8


State 11

	NamespaceInner -> Ident .                           (rule 60)

	let            reduce using rule 60
	dec            reduce using rule 60
	in             reduce using rule 60
	if             reduce using rule 60
	'('            reduce using rule 60
	')'            reduce using rule 60
	'{'            reduce using rule 60
	'}'            reduce using rule 60
	'_'            reduce using rule 60
	identifier     reduce using rule 60
	string         reduce using rule 60
	integer        reduce using rule 60
	float          reduce using rule 60
	'->'           reduce using rule 60
	','            reduce using rule 60
	'::'           reduce using rule 60
	operator       reduce using rule 60
	%eof           reduce using rule 60


State 12

	Expr -> Namespace .                                 (rule 11)

	let            reduce using rule 11
	in             reduce using rule 11
	if             reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	identifier     reduce using rule 11
	string         reduce using rule 11
	integer        reduce using rule 11
	float          reduce using rule 11
	','            reduce using rule 11
	operator       reduce using rule 11
	%eof           reduce using rule 11


State 13

	Namespace -> NamespaceInner .                       (rule 59)
	NamespaceInner -> NamespaceInner . '::' Ident       (rule 61)

	let            reduce using rule 59
	dec            reduce using rule 59
	in             reduce using rule 59
	if             reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59
	'{'            reduce using rule 59
	'}'            reduce using rule 59
	'_'            reduce using rule 59
	identifier     reduce using rule 59
	string         reduce using rule 59
	integer        reduce using rule 59
	float          reduce using rule 59
	'->'           reduce using rule 59
	','            reduce using rule 59
	'::'           shift, and enter state 46
	operator       reduce using rule 59
	%eof           reduce using rule 59


State 14

	Expr -> let . Bindings in Expr                      (rule 12)

	'('            shift, and enter state 45
	identifier     shift, and enter state 17

	Bindings       goto state 38
	BindingsInner  goto state 39
	Binding        goto state 40
	Patterns       goto state 41
	PatternsInner  goto state 42
	PatternBinding goto state 43
	Ident          goto state 44

State 15

	Expr -> if . Expr '{' Expr '}' else '{' Expr '}'    (rule 13)
	Expr -> if . Expr '{' Expr '}' ElifCond else '{' Expr '}'    (rule 14)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 37
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 16

	Tuple -> '(' . ')'                                  (rule 34)
	Tuple -> '(' . ',' ')'                              (rule 35)
	Tuple -> '(' . Expr ',' ')'                         (rule 36)
	Tuple -> '(' . TupleExpr ',' ')'                    (rule 37)
	Tuple -> '(' . TupleExpr ')'                        (rule 38)
	Tuple -> '(' . Expr ')'                             (rule 39)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	')'            shift, and enter state 35
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	','            shift, and enter state 36

	Expr           goto state 33
	Tuple          goto state 9
	TupleExpr      goto state 34
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 17

	Ident -> identifier .                               (rule 58)

	let            reduce using rule 58
	dec            reduce using rule 58
	in             reduce using rule 58
	if             reduce using rule 58
	'('            reduce using rule 58
	')'            reduce using rule 58
	'{'            reduce using rule 58
	'}'            reduce using rule 58
	'_'            reduce using rule 58
	identifier     reduce using rule 58
	string         reduce using rule 58
	integer        reduce using rule 58
	float          reduce using rule 58
	'->'           reduce using rule 58
	','            reduce using rule 58
	'::'           reduce using rule 58
	':'            reduce using rule 58
	'='            reduce using rule 58
	operator       reduce using rule 58
	%eof           reduce using rule 58


State 18

	Literal -> string .                                 (rule 43)

	let            reduce using rule 43
	in             reduce using rule 43
	if             reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	identifier     reduce using rule 43
	string         reduce using rule 43
	integer        reduce using rule 43
	float          reduce using rule 43
	','            reduce using rule 43
	operator       reduce using rule 43
	%eof           reduce using rule 43


State 19

	Literal -> integer .                                (rule 45)

	let            reduce using rule 45
	in             reduce using rule 45
	if             reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	identifier     reduce using rule 45
	string         reduce using rule 45
	integer        reduce using rule 45
	float          reduce using rule 45
	','            reduce using rule 45
	operator       reduce using rule 45
	%eof           reduce using rule 45


State 20

	Literal -> float .                                  (rule 44)

	let            reduce using rule 44
	in             reduce using rule 44
	if             reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	identifier     reduce using rule 44
	string         reduce using rule 44
	integer        reduce using rule 44
	float          reduce using rule 44
	','            reduce using rule 44
	operator       reduce using rule 44
	%eof           reduce using rule 44


State 21

	%start_ty -> Type .                                 (rule 1)
	Type -> Type . Type                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)

	'('            shift, and enter state 23
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17
	'->'           shift, and enter state 32
	%eof           accept

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 22

	Type -> Namespace .                                 (rule 47)

	dec            reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'_'            reduce using rule 47
	identifier     reduce using rule 47
	'->'           reduce using rule 47
	','            reduce using rule 47
	%eof           reduce using rule 47


State 23

	Type -> '(' . TupleType ')'                         (rule 48)
	Type -> '(' . ')'                                   (rule 49)
	Type -> '(' . ',' ')'                               (rule 50)
	Type -> '(' . Type ',' ')'                          (rule 51)
	Type -> '(' . TupleType ',' ')'                     (rule 52)
	Type -> '(' . Type ')'                              (rule 53)

	'('            shift, and enter state 23
	')'            shift, and enter state 29
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17
	','            shift, and enter state 30

	Type           goto state 27
	TupleType      goto state 28
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 24

	Type -> '_' .                                       (rule 46)

	dec            reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'_'            reduce using rule 46
	identifier     reduce using rule 46
	'->'           reduce using rule 46
	','            reduce using rule 46
	%eof           reduce using rule 46


State 25

	%start_statements -> Statements .                   (rule 0)
	StatementsInner -> Statements . Statement           (rule 5)

	dec            shift, and enter state 7
	%eof           accept

	Statement      goto state 26

State 26

	StatementsInner -> Statements Statement .           (rule 5)

	dec            reduce using rule 5
	%eof           reduce using rule 5


State 27

	Type -> '(' Type . ',' ')'                          (rule 51)
	Type -> '(' Type . ')'                              (rule 53)
	Type -> Type . Type                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)
	TupleType -> Type . ',' Type                        (rule 57)

	'('            shift, and enter state 23
	')'            shift, and enter state 72
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17
	'->'           shift, and enter state 32
	','            shift, and enter state 73

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 28

	Type -> '(' TupleType . ')'                         (rule 48)
	Type -> '(' TupleType . ',' ')'                     (rule 52)
	TupleType -> TupleType . ',' Type                   (rule 56)

	')'            shift, and enter state 70
	','            shift, and enter state 71


State 29

	Type -> '(' ')' .                                   (rule 49)

	dec            reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'_'            reduce using rule 49
	identifier     reduce using rule 49
	'->'           reduce using rule 49
	','            reduce using rule 49
	%eof           reduce using rule 49


State 30

	Type -> '(' ',' . ')'                               (rule 50)

	')'            shift, and enter state 69


State 31

	Type -> Type . Type                                 (rule 54)
	Type -> Type Type .                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)

	dec            reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	'_'            reduce using rule 54
	identifier     reduce using rule 54
	'->'           reduce using rule 54
	','            reduce using rule 54
	%eof           reduce using rule 54

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 32

	Type -> Type '->' . Type                            (rule 55)

	'('            shift, and enter state 23
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17

	Type           goto state 68
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 33

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	Tuple -> '(' Expr . ',' ')'                         (rule 36)
	Tuple -> '(' Expr . ')'                             (rule 39)
	TupleExpr -> Expr . ',' Expr                        (rule 41)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	')'            shift, and enter state 66
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	','            shift, and enter state 67
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 34

	Tuple -> '(' TupleExpr . ',' ')'                    (rule 37)
	Tuple -> '(' TupleExpr . ')'                        (rule 38)
	TupleExpr -> TupleExpr . ',' Expr                   (rule 40)

	')'            shift, and enter state 64
	','            shift, and enter state 65


State 35

	Tuple -> '(' ')' .                                  (rule 34)

	let            reduce using rule 34
	in             reduce using rule 34
	if             reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	identifier     reduce using rule 34
	string         reduce using rule 34
	integer        reduce using rule 34
	float          reduce using rule 34
	','            reduce using rule 34
	operator       reduce using rule 34
	%eof           reduce using rule 34


State 36

	Tuple -> '(' ',' . ')'                              (rule 35)

	')'            shift, and enter state 63


State 37

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> if Expr . '{' Expr '}' else '{' Expr '}'    (rule 13)
	Expr -> if Expr . '{' Expr '}' ElifCond else '{' Expr '}'    (rule 14)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 62
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 38

	Expr -> let Bindings . in Expr                      (rule 12)

	in             shift, and enter state 61


State 39

	Bindings -> BindingsInner .                         (rule 16)
	BindingsInner -> BindingsInner . Binding            (rule 17)

	in             reduce using rule 16
	'('            shift, and enter state 45
	identifier     shift, and enter state 17

	Binding        goto state 60
	Patterns       goto state 41
	PatternsInner  goto state 42
	PatternBinding goto state 43
	Ident          goto state 44

State 40

	BindingsInner -> Binding .                          (rule 18)

	in             reduce using rule 18
	'('            reduce using rule 18
	identifier     reduce using rule 18


State 41

	Binding -> Patterns . '=' Expr                      (rule 19)

	'='            shift, and enter state 59


State 42

	Patterns -> PatternsInner .                         (rule 20)
	PatternsInner -> PatternsInner . PatternBinding     (rule 21)

	'('            shift, and enter state 45
	identifier     shift, and enter state 17
	'='            reduce using rule 20

	PatternBinding goto state 58
	Ident          goto state 44

State 43

	PatternsInner -> PatternBinding .                   (rule 22)

	'('            reduce using rule 22
	identifier     reduce using rule 22
	'='            reduce using rule 22


State 44

	PatternBinding -> Ident .                           (rule 23)

	'('            reduce using rule 23
	identifier     reduce using rule 23
	'='            reduce using rule 23


State 45

	PatternBinding -> '(' . Pattern ')'                 (rule 24)

	'('            shift, and enter state 57
	identifier     shift, and enter state 17

	Pattern        goto state 54
	Ident          goto state 55
	Namespace      goto state 56
	NamespaceInner goto state 13

State 46

	NamespaceInner -> NamespaceInner '::' . Ident       (rule 61)

	identifier     shift, and enter state 17

	Ident          goto state 53

State 47

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	Expr -> Expr Expr .                                 (rule 15)

	let            shift, and enter state 14
			(reduce using rule 15)

	in             reduce using rule 15
	if             shift, and enter state 15
			(reduce using rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	identifier     reduce using rule 15
	string         reduce using rule 15
	integer        reduce using rule 15
	float          reduce using rule 15
	','            reduce using rule 15
	operator       reduce using rule 15
	%eof           reduce using rule 15

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 48

	Expr -> Expr Operator . Expr                        (rule 9)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 52
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 49

	Operator -> operator .                              (rule 42)

	let            reduce using rule 42
	if             reduce using rule 42
	'('            reduce using rule 42
	identifier     reduce using rule 42
	string         reduce using rule 42
	integer        reduce using rule 42
	float          reduce using rule 42


State 50

	Statement -> dec Ident . ':' Type                   (rule 7)

	':'            shift, and enter state 51


State 51

	Statement -> dec Ident ':' . Type                   (rule 7)

	'('            shift, and enter state 23
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17

	Type           goto state 89
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 52

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr Operator Expr .                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
			(reduce using rule 9)

	in             reduce using rule 9
	if             shift, and enter state 15
			(reduce using rule 9)

	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	identifier     reduce using rule 9
	string         reduce using rule 9
	integer        reduce using rule 9
	float          reduce using rule 9
	','            reduce using rule 9
	operator       reduce using rule 9
	%eof           reduce using rule 9

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 53

	NamespaceInner -> NamespaceInner '::' Ident .       (rule 61)

	let            reduce using rule 61
	dec            reduce using rule 61
	in             reduce using rule 61
	if             reduce using rule 61
	'('            reduce using rule 61
	')'            reduce using rule 61
	'{'            reduce using rule 61
	'}'            reduce using rule 61
	'_'            reduce using rule 61
	identifier     reduce using rule 61
	string         reduce using rule 61
	integer        reduce using rule 61
	float          reduce using rule 61
	'->'           reduce using rule 61
	','            reduce using rule 61
	'::'           reduce using rule 61
	operator       reduce using rule 61
	%eof           reduce using rule 61


State 54

	PatternBinding -> '(' Pattern . ')'                 (rule 24)

	')'            shift, and enter state 88


State 55

	Pattern -> Ident .                                  (rule 27)
	NamespaceInner -> Ident .                           (rule 60)

	'('            reduce using rule 60
			(reduce using rule 27)

	')'            reduce using rule 27
	identifier     reduce using rule 60
			(reduce using rule 27)

	'::'           reduce using rule 60


State 56

	Pattern -> Namespace . PatternsUnconstrained        (rule 28)

	'('            shift, and enter state 57
	identifier     shift, and enter state 17

	PatternsUnconstrainedgoto state 86
	Pattern        goto state 87
	Ident          goto state 55
	Namespace      goto state 56
	NamespaceInner goto state 13

State 57

	Pattern -> '(' . Pattern ')'                        (rule 29)

	'('            shift, and enter state 57
	identifier     shift, and enter state 17

	Pattern        goto state 85
	Ident          goto state 55
	Namespace      goto state 56
	NamespaceInner goto state 13

State 58

	PatternsInner -> PatternsInner PatternBinding .     (rule 21)

	'('            reduce using rule 21
	identifier     reduce using rule 21
	'='            reduce using rule 21


State 59

	Binding -> Patterns '=' . Expr                      (rule 19)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 84
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 60

	BindingsInner -> BindingsInner Binding .            (rule 17)

	in             reduce using rule 17
	'('            reduce using rule 17
	identifier     reduce using rule 17


State 61

	Expr -> let Bindings in . Expr                      (rule 12)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 83
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 62

	Expr -> if Expr '{' . Expr '}' else '{' Expr '}'    (rule 13)
	Expr -> if Expr '{' . Expr '}' ElifCond else '{' Expr '}'    (rule 14)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 82
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 63

	Tuple -> '(' ',' ')' .                              (rule 35)

	let            reduce using rule 35
	in             reduce using rule 35
	if             reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	identifier     reduce using rule 35
	string         reduce using rule 35
	integer        reduce using rule 35
	float          reduce using rule 35
	','            reduce using rule 35
	operator       reduce using rule 35
	%eof           reduce using rule 35


State 64

	Tuple -> '(' TupleExpr ')' .                        (rule 38)

	let            reduce using rule 38
	in             reduce using rule 38
	if             reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	identifier     reduce using rule 38
	string         reduce using rule 38
	integer        reduce using rule 38
	float          reduce using rule 38
	','            reduce using rule 38
	operator       reduce using rule 38
	%eof           reduce using rule 38


State 65

	Tuple -> '(' TupleExpr ',' . ')'                    (rule 37)
	TupleExpr -> TupleExpr ',' . Expr                   (rule 40)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	')'            shift, and enter state 81
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 80
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 66

	Tuple -> '(' Expr ')' .                             (rule 39)

	let            reduce using rule 39
	in             reduce using rule 39
	if             reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	identifier     reduce using rule 39
	string         reduce using rule 39
	integer        reduce using rule 39
	float          reduce using rule 39
	','            reduce using rule 39
	operator       reduce using rule 39
	%eof           reduce using rule 39


State 67

	Tuple -> '(' Expr ',' . ')'                         (rule 36)
	TupleExpr -> Expr ',' . Expr                        (rule 41)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	')'            shift, and enter state 79
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 78
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 68

	Type -> Type . Type                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)
	Type -> Type '->' Type .                            (rule 55)

	dec            reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'_'            reduce using rule 55
	identifier     reduce using rule 55
	'->'           reduce using rule 55
	','            reduce using rule 55
	%eof           reduce using rule 55

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 69

	Type -> '(' ',' ')' .                               (rule 50)

	dec            reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'_'            reduce using rule 50
	identifier     reduce using rule 50
	'->'           reduce using rule 50
	','            reduce using rule 50
	%eof           reduce using rule 50


State 70

	Type -> '(' TupleType ')' .                         (rule 48)

	dec            reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'_'            reduce using rule 48
	identifier     reduce using rule 48
	'->'           reduce using rule 48
	','            reduce using rule 48
	%eof           reduce using rule 48


State 71

	Type -> '(' TupleType ',' . ')'                     (rule 52)
	TupleType -> TupleType ',' . Type                   (rule 56)

	'('            shift, and enter state 23
	')'            shift, and enter state 77
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17

	Type           goto state 76
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 72

	Type -> '(' Type ')' .                              (rule 53)

	dec            reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	'_'            reduce using rule 53
	identifier     reduce using rule 53
	'->'           reduce using rule 53
	','            reduce using rule 53
	%eof           reduce using rule 53


State 73

	Type -> '(' Type ',' . ')'                          (rule 51)
	TupleType -> Type ',' . Type                        (rule 57)

	'('            shift, and enter state 23
	')'            shift, and enter state 75
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17

	Type           goto state 74
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 74

	Type -> Type . Type                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)
	TupleType -> Type ',' Type .                        (rule 57)

	'('            shift, and enter state 23
	')'            reduce using rule 57
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17
	'->'           shift, and enter state 32
	','            reduce using rule 57

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 75

	Type -> '(' Type ',' ')' .                          (rule 51)

	dec            reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'_'            reduce using rule 51
	identifier     reduce using rule 51
	'->'           reduce using rule 51
	','            reduce using rule 51
	%eof           reduce using rule 51


State 76

	Type -> Type . Type                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)
	TupleType -> TupleType ',' Type .                   (rule 56)

	'('            shift, and enter state 23
	')'            reduce using rule 56
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17
	'->'           shift, and enter state 32
	','            reduce using rule 56

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 77

	Type -> '(' TupleType ',' ')' .                     (rule 52)

	dec            reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'_'            reduce using rule 52
	identifier     reduce using rule 52
	'->'           reduce using rule 52
	','            reduce using rule 52
	%eof           reduce using rule 52


State 78

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	TupleExpr -> Expr ',' Expr .                        (rule 41)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	')'            reduce using rule 41
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	','            reduce using rule 41
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 79

	Tuple -> '(' Expr ',' ')' .                         (rule 36)

	let            reduce using rule 36
	in             reduce using rule 36
	if             reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	identifier     reduce using rule 36
	string         reduce using rule 36
	integer        reduce using rule 36
	float          reduce using rule 36
	','            reduce using rule 36
	operator       reduce using rule 36
	%eof           reduce using rule 36


State 80

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	TupleExpr -> TupleExpr ',' Expr .                   (rule 40)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	')'            reduce using rule 40
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	','            reduce using rule 40
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 81

	Tuple -> '(' TupleExpr ',' ')' .                    (rule 37)

	let            reduce using rule 37
	in             reduce using rule 37
	if             reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	identifier     reduce using rule 37
	string         reduce using rule 37
	integer        reduce using rule 37
	float          reduce using rule 37
	','            reduce using rule 37
	operator       reduce using rule 37
	%eof           reduce using rule 37


State 82

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> if Expr '{' Expr . '}' else '{' Expr '}'    (rule 13)
	Expr -> if Expr '{' Expr . '}' ElifCond else '{' Expr '}'    (rule 14)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	'}'            shift, and enter state 92
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 83

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> let Bindings in Expr .                      (rule 12)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
			(reduce using rule 12)

	in             reduce using rule 12
	if             shift, and enter state 15
			(reduce using rule 12)

	'('            shift, and enter state 16
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	','            reduce using rule 12
	operator       shift, and enter state 49
	%eof           reduce using rule 12

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 84

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	Binding -> Patterns '=' Expr .                      (rule 19)

	let            shift, and enter state 14
	in             reduce using rule 19
	if             shift, and enter state 15
	'('            shift, and enter state 16
			(reduce using rule 19)

	identifier     shift, and enter state 17
			(reduce using rule 19)

	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 85

	Pattern -> '(' Pattern . ')'                        (rule 29)

	')'            shift, and enter state 91


State 86

	PatternsUnconstrained -> PatternsUnconstrained . Pattern    (rule 25)
	Pattern -> Namespace PatternsUnconstrained .        (rule 28)

	'('            shift, and enter state 57
			(reduce using rule 28)

	')'            reduce using rule 28
	identifier     shift, and enter state 17
			(reduce using rule 28)


	Pattern        goto state 90
	Ident          goto state 55
	Namespace      goto state 56
	NamespaceInner goto state 13

State 87

	PatternsUnconstrained -> Pattern .                  (rule 26)

	'('            reduce using rule 26
	')'            reduce using rule 26
	identifier     reduce using rule 26


State 88

	PatternBinding -> '(' Pattern ')' .                 (rule 24)

	'('            reduce using rule 24
	identifier     reduce using rule 24
	'='            reduce using rule 24


State 89

	Statement -> dec Ident ':' Type .                   (rule 7)
	Type -> Type . Type                                 (rule 54)
	Type -> Type . '->' Type                            (rule 55)

	dec            reduce using rule 7
	'('            shift, and enter state 23
	'_'            shift, and enter state 24
	identifier     shift, and enter state 17
	'->'           shift, and enter state 32
	%eof           reduce using rule 7

	Type           goto state 31
	Ident          goto state 11
	Namespace      goto state 22
	NamespaceInner goto state 13

State 90

	PatternsUnconstrained -> PatternsUnconstrained Pattern .    (rule 25)

	'('            reduce using rule 25
	')'            reduce using rule 25
	identifier     reduce using rule 25


State 91

	Pattern -> '(' Pattern ')' .                        (rule 29)

	'('            reduce using rule 29
	')'            reduce using rule 29
	identifier     reduce using rule 29


State 92

	Expr -> if Expr '{' Expr '}' . else '{' Expr '}'    (rule 13)
	Expr -> if Expr '{' Expr '}' . ElifCond else '{' Expr '}'    (rule 14)

	else           shift, and enter state 96
	elif           shift, and enter state 97

	ElifCond       goto state 93
	ElifCondInner  goto state 94
	Elif           goto state 95

State 93

	Expr -> if Expr '{' Expr '}' ElifCond . else '{' Expr '}'    (rule 14)

	else           shift, and enter state 101


State 94

	ElifCond -> ElifCondInner .                         (rule 30)
	ElifCondInner -> ElifCondInner . Elif               (rule 31)

	else           reduce using rule 30
	elif           shift, and enter state 97

	Elif           goto state 100

State 95

	ElifCondInner -> Elif .                             (rule 32)

	else           reduce using rule 32
	elif           reduce using rule 32


State 96

	Expr -> if Expr '{' Expr '}' else . '{' Expr '}'    (rule 13)

	'{'            shift, and enter state 99


State 97

	Elif -> elif . Expr '{' Expr '}'                    (rule 33)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 98
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 98

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	Elif -> elif Expr . '{' Expr '}'                    (rule 33)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	'{'            shift, and enter state 104
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 99

	Expr -> if Expr '{' Expr '}' else '{' . Expr '}'    (rule 13)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 103
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 100

	ElifCondInner -> ElifCondInner Elif .               (rule 31)

	else           reduce using rule 31
	elif           reduce using rule 31


State 101

	Expr -> if Expr '{' Expr '}' ElifCond else . '{' Expr '}'    (rule 14)

	'{'            shift, and enter state 102


State 102

	Expr -> if Expr '{' Expr '}' ElifCond else '{' . Expr '}'    (rule 14)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 107
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 103

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> if Expr '{' Expr '}' else '{' Expr . '}'    (rule 13)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	'}'            shift, and enter state 106
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 104

	Elif -> elif Expr '{' . Expr '}'                    (rule 33)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20

	Expr           goto state 105
	Tuple          goto state 9
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 105

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> Expr . Expr                                 (rule 15)
	Elif -> elif Expr '{' Expr . '}'                    (rule 33)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	'}'            shift, and enter state 109
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 106

	Expr -> if Expr '{' Expr '}' else '{' Expr '}' .    (rule 13)

	let            reduce using rule 13
	in             reduce using rule 13
	if             reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	identifier     reduce using rule 13
	string         reduce using rule 13
	integer        reduce using rule 13
	float          reduce using rule 13
	','            reduce using rule 13
	operator       reduce using rule 13
	%eof           reduce using rule 13


State 107

	Expr -> Expr . Operator Expr                        (rule 9)
	Expr -> if Expr '{' Expr '}' ElifCond else '{' Expr . '}'    (rule 14)
	Expr -> Expr . Expr                                 (rule 15)

	let            shift, and enter state 14
	if             shift, and enter state 15
	'('            shift, and enter state 16
	'}'            shift, and enter state 108
	identifier     shift, and enter state 17
	string         shift, and enter state 18
	integer        shift, and enter state 19
	float          shift, and enter state 20
	operator       shift, and enter state 49

	Expr           goto state 47
	Tuple          goto state 9
	Operator       goto state 48
	Literal        goto state 10
	Ident          goto state 11
	Namespace      goto state 12
	NamespaceInner goto state 13

State 108

	Expr -> if Expr '{' Expr '}' ElifCond else '{' Expr '}' .    (rule 14)

	let            reduce using rule 14
	in             reduce using rule 14
	if             reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	identifier     reduce using rule 14
	string         reduce using rule 14
	integer        reduce using rule 14
	float          reduce using rule 14
	','            reduce using rule 14
	operator       reduce using rule 14
	%eof           reduce using rule 14


State 109

	Elif -> elif Expr '{' Expr '}' .                    (rule 33)

	else           reduce using rule 33
	elif           reduce using rule 33


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 62
Number of terminals: 29
Number of non-terminals: 27
Number of states: 110

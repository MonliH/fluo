-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Syntax/Parser.y
-----------------------------------------------------------------------------

state 0 contains 1 shift/reduce conflicts.
state 27 contains 1 shift/reduce conflicts.

terminal let is unused
terminal rec is unused
terminal impl is unused
terminal trait is unused
terminal in is unused
terminal if is unused
terminal else is unused
terminal match is unused
terminal '"' is unused
terminal "'" is unused
terminal '[' is unused
terminal ']' is unused
terminal '{' is unused
terminal '}' is unused
terminal '->' is unused
terminal '=' is unused
terminal operator is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_statements -> Statements                    (0)
	%start_ty -> Type                                  (1)
	%start_expr -> Expr                                (2)
	Statements -> StatementsInner                      (3)
	Statements ->                                      (4)
	StatementsInner -> Statements Statement            (5)
	StatementsInner -> Statement                       (6)
	Statement -> dec Ident ':' Type                    (7)
	Expr -> Literal                                    (8)
	Literal -> string                                  (9)
	Literal -> float                                   (10)
	Literal -> integer                                 (11)
	Type -> '_'                                        (12)
	Type -> Namespace                                  (13)
	Type -> '(' TupleType ')'                          (14)
	Type -> '(' ')'                                    (15)
	Type -> '(' ',' ')'                                (16)
	Type -> '(' Type ',' ')'                           (17)
	Type -> '(' TupleType ',' ')'                      (18)
	Type -> Type Type                                  (19)
	TupleType -> TupleType ',' Type                    (20)
	TupleType -> Type ',' Type                         (21)
	Ident -> identifier                                (22)
	Namespace -> NamespaceInner                        (23)
	NamespaceInner -> Ident                            (24)
	NamespaceInner -> NamespaceInner '::' Ident        (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { MkToken _ LetTok }
	rec            { MkToken _ RecTok }
	impl           { MkToken _ ImplTok }
	trait          { MkToken _ TraitTok }
	dec            { MkToken _ DecTok }
	in             { MkToken _ InTok }
	if             { MkToken _ IfTok }
	else           { MkToken _ ElseTok }
	match          { MkToken _ MatchTok }
	'"'            { MkToken _ DoubleQouteTok }
	"'"            { MkToken _ SingleQouteTok }
	'('            { MkToken _ LParenTok }
	')'            { MkToken _ RParenTok }
	'['            { MkToken _ LBracketTok }
	']'            { MkToken _ RBracketTok }
	'{'            { MkToken _ LCurlyTok }
	'}'            { MkToken _ RCurlyTok }
	'_'            { MkToken _ (IdentTok "_") }
	identifier     { MkToken _ (IdentTok _) }
	string         { MkToken _ (StrTok _) }
	integer        { MkToken _ (IntegerTok _) }
	float          { MkToken _ (FloatTok _) }
	'->'           { MkToken _ (OperatorTok "->") }
	','            { MkToken _ (OperatorTok ",") }
	'::'           { MkToken _ (OperatorTok "::") }
	':'            { MkToken _ (OperatorTok ":") }
	'='            { MkToken _ (OperatorTok "=") }
	operator       { MkToken _ (OperatorTok _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_statements rule  0
	%start_ty       rule  1
	%start_expr     rule  2
	Statements      rules 3, 4
	StatementsInner rules 5, 6
	Statement       rule  7
	Expr            rule  8
	Literal         rules 9, 10, 11
	Type            rules 12, 13, 14, 15, 16, 17, 18, 19
	TupleType       rules 20, 21
	Ident           rule  22
	Namespace       rule  23
	NamespaceInner  rules 24, 25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_statements -> . Statements                   (rule 0)

	dec            shift, and enter state 7
			(reduce using rule 4)

	%eof           reduce using rule 4

	Statements     goto state 20
	StatementsInnergoto state 5
	Statement      goto state 6

State 1

	%start_ty -> . Type                                 (rule 1)

	'('            shift, and enter state 17
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19

	Type           goto state 13
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 2

	%start_expr -> . Expr                               (rule 2)

	string         shift, and enter state 10
	integer        shift, and enter state 11
	float          shift, and enter state 12

	Expr           goto state 8
	Literal        goto state 9

State 3

	Statements -> . StatementsInner                     (rule 3)

	dec            shift, and enter state 7

	Statements     goto state 4
	StatementsInnergoto state 5
	Statement      goto state 6

State 4

	StatementsInner -> Statements . Statement           (rule 5)

	dec            shift, and enter state 7

	Statement      goto state 21

State 5

	Statements -> StatementsInner .                     (rule 3)

	dec            reduce using rule 3
	%eof           reduce using rule 3


State 6

	StatementsInner -> Statement .                      (rule 6)

	dec            reduce using rule 6
	%eof           reduce using rule 6


State 7

	Statement -> dec . Ident ':' Type                   (rule 7)

	identifier     shift, and enter state 19

	Ident          goto state 28

State 8

	%start_expr -> Expr .                               (rule 2)

	%eof           accept


State 9

	Expr -> Literal .                                   (rule 8)

	%eof           reduce using rule 8


State 10

	Literal -> string .                                 (rule 9)

	%eof           reduce using rule 9


State 11

	Literal -> integer .                                (rule 11)

	%eof           reduce using rule 11


State 12

	Literal -> float .                                  (rule 10)

	%eof           reduce using rule 10


State 13

	%start_ty -> Type .                                 (rule 1)
	Type -> Type . Type                                 (rule 19)

	'('            shift, and enter state 17
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19
	%eof           accept

	Type           goto state 27
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 14

	NamespaceInner -> Ident .                           (rule 24)

	dec            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'_'            reduce using rule 24
	identifier     reduce using rule 24
	','            reduce using rule 24
	'::'           reduce using rule 24
	%eof           reduce using rule 24


State 15

	Type -> Namespace .                                 (rule 13)

	dec            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'_'            reduce using rule 13
	identifier     reduce using rule 13
	','            reduce using rule 13
	%eof           reduce using rule 13


State 16

	Namespace -> NamespaceInner .                       (rule 23)
	NamespaceInner -> NamespaceInner . '::' Ident       (rule 25)

	dec            reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'_'            reduce using rule 23
	identifier     reduce using rule 23
	','            reduce using rule 23
	'::'           shift, and enter state 26
	%eof           reduce using rule 23


State 17

	Type -> '(' . TupleType ')'                         (rule 14)
	Type -> '(' . ')'                                   (rule 15)
	Type -> '(' . ',' ')'                               (rule 16)
	Type -> '(' . Type ',' ')'                          (rule 17)
	Type -> '(' . TupleType ',' ')'                     (rule 18)

	'('            shift, and enter state 17
	')'            shift, and enter state 24
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19
	','            shift, and enter state 25

	Type           goto state 22
	TupleType      goto state 23
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 18

	Type -> '_' .                                       (rule 12)

	dec            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'_'            reduce using rule 12
	identifier     reduce using rule 12
	','            reduce using rule 12
	%eof           reduce using rule 12


State 19

	Ident -> identifier .                               (rule 22)

	dec            reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'_'            reduce using rule 22
	identifier     reduce using rule 22
	','            reduce using rule 22
	'::'           reduce using rule 22
	':'            reduce using rule 22
	%eof           reduce using rule 22


State 20

	%start_statements -> Statements .                   (rule 0)
	StatementsInner -> Statements . Statement           (rule 5)

	dec            shift, and enter state 7
	%eof           accept

	Statement      goto state 21

State 21

	StatementsInner -> Statements Statement .           (rule 5)

	dec            reduce using rule 5
	%eof           reduce using rule 5


State 22

	Type -> '(' Type . ',' ')'                          (rule 17)
	Type -> Type . Type                                 (rule 19)
	TupleType -> Type . ',' Type                        (rule 21)

	'('            shift, and enter state 17
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19
	','            shift, and enter state 34

	Type           goto state 27
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 23

	Type -> '(' TupleType . ')'                         (rule 14)
	Type -> '(' TupleType . ',' ')'                     (rule 18)
	TupleType -> TupleType . ',' Type                   (rule 20)

	')'            shift, and enter state 32
	','            shift, and enter state 33


State 24

	Type -> '(' ')' .                                   (rule 15)

	dec            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'_'            reduce using rule 15
	identifier     reduce using rule 15
	','            reduce using rule 15
	%eof           reduce using rule 15


State 25

	Type -> '(' ',' . ')'                               (rule 16)

	')'            shift, and enter state 31


State 26

	NamespaceInner -> NamespaceInner '::' . Ident       (rule 25)

	identifier     shift, and enter state 19

	Ident          goto state 30

State 27

	Type -> Type . Type                                 (rule 19)
	Type -> Type Type .                                 (rule 19)

	dec            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'_'            reduce using rule 19
	identifier     shift, and enter state 19
			(reduce using rule 19)

	','            reduce using rule 19
	%eof           reduce using rule 19

	Type           goto state 27
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 28

	Statement -> dec Ident . ':' Type                   (rule 7)

	':'            shift, and enter state 29


State 29

	Statement -> dec Ident ':' . Type                   (rule 7)

	'('            shift, and enter state 17
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19

	Type           goto state 39
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 30

	NamespaceInner -> NamespaceInner '::' Ident .       (rule 25)

	dec            reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'_'            reduce using rule 25
	identifier     reduce using rule 25
	','            reduce using rule 25
	'::'           reduce using rule 25
	%eof           reduce using rule 25


State 31

	Type -> '(' ',' ')' .                               (rule 16)

	dec            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'_'            reduce using rule 16
	identifier     reduce using rule 16
	','            reduce using rule 16
	%eof           reduce using rule 16


State 32

	Type -> '(' TupleType ')' .                         (rule 14)

	dec            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'_'            reduce using rule 14
	identifier     reduce using rule 14
	','            reduce using rule 14
	%eof           reduce using rule 14


State 33

	Type -> '(' TupleType ',' . ')'                     (rule 18)
	TupleType -> TupleType ',' . Type                   (rule 20)

	'('            shift, and enter state 17
	')'            shift, and enter state 38
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19

	Type           goto state 37
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 34

	Type -> '(' Type ',' . ')'                          (rule 17)
	TupleType -> Type ',' . Type                        (rule 21)

	'('            shift, and enter state 17
	')'            shift, and enter state 36
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19

	Type           goto state 35
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 35

	Type -> Type . Type                                 (rule 19)
	TupleType -> Type ',' Type .                        (rule 21)

	'('            shift, and enter state 17
	')'            reduce using rule 21
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19
	','            reduce using rule 21

	Type           goto state 27
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 36

	Type -> '(' Type ',' ')' .                          (rule 17)

	dec            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'_'            reduce using rule 17
	identifier     reduce using rule 17
	','            reduce using rule 17
	%eof           reduce using rule 17


State 37

	Type -> Type . Type                                 (rule 19)
	TupleType -> TupleType ',' Type .                   (rule 20)

	'('            shift, and enter state 17
	')'            reduce using rule 20
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19
	','            reduce using rule 20

	Type           goto state 27
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

State 38

	Type -> '(' TupleType ',' ')' .                     (rule 18)

	dec            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'_'            reduce using rule 18
	identifier     reduce using rule 18
	','            reduce using rule 18
	%eof           reduce using rule 18


State 39

	Statement -> dec Ident ':' Type .                   (rule 7)
	Type -> Type . Type                                 (rule 19)

	dec            reduce using rule 7
	'('            shift, and enter state 17
	'_'            shift, and enter state 18
	identifier     shift, and enter state 19
	%eof           reduce using rule 7

	Type           goto state 27
	Ident          goto state 14
	Namespace      goto state 15
	NamespaceInner goto state 16

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 28
Number of non-terminals: 13
Number of states: 40
